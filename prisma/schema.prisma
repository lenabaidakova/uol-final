generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Role {
  id    String @id @default(cuid())
  name  String @unique // SUPPORTER, SHELTER
  users User[]
}

model RequestType {
  id    String @id @default(cuid())
  name  String @unique // SUPPLIES, SERVICES, VOLUNTEERS
  requests Request[]
}

model RequestUrgency {
  id    String @id @default(cuid())
  name  String @unique // HIGH, MEDIUM, LOW
  requests Request[]
}

model RequestStatus {
  id    String @id @default(cuid())
  name  String @unique // PENDING, IN_PROGRESS, COMPLETED, ARCHIVED
  requests Request[]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  requests  Request[] // user can have many requests
  messages  Message[] // user can send many messages
  assignedRequests Request[] @relation("AssignedRequests") // user can take requests in progress
  unreadMessages   UnreadMessage[] // track unread messages per user
  confirmationToken UserConfirmationToken?
}

model UserConfirmationToken {
  userId    String @id
  token     String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Request {
  id          String   @id @default(cuid())
  title       String
  typeId      String
  type        RequestType @relation(fields: [typeId], references: [id])
  urgencyId   String
  urgency     RequestUrgency @relation(fields: [urgencyId], references: [id])
  statusId    String
  status      RequestStatus @relation(fields: [statusId], references: [id])
  dueDate     DateTime?
  details     String
  location    String
  creatorId   String
  creator     User @relation(fields: [creatorId], references: [id])

  assignedToId String? // supporter who took this request
  assignedTo   User?   @relation("AssignedRequests", fields: [assignedToId], references: [id]) // supporter who took this request

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  messages    Message[] // request can have many messages
  unreadMessages UnreadMessage[] // track unread messages per request
}

model Message {
  id         String   @id @default(cuid())
  requestId  String
  senderId   String
  text       String
  createdAt  DateTime @default(now())

  request    Request  @relation(fields: [requestId], references: [id])
  sender     User     @relation(fields: [senderId], references: [id])
  unreadMessages UnreadMessage[] // track unread messages per message
}

model UnreadMessage {
  id         String   @id @default(cuid())
  userId     String
  messageId  String
  requestId  String
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  request    Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId]) // avoid duplicate unread messages
}
